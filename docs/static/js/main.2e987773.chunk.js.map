{"version":3,"sources":["serviceWorker.ts","theme.ts","types/queries.ts","containers/OrganisationSwitcher.tsx","containers/Organisations.tsx","containers/RepoList.tsx","containers/Repository.tsx","containers/Organisation.tsx","containers/User.tsx","App.tsx","accessControl.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","phocasColors","light","main","dark","contrastText","createMuiTheme","palette","primary","secondary","deepOrange","overrides","MuiTableCell","sizeSmall","padding","MuiSvgIcon","fontSizeSmall","fontSize","fontSizeLarge","MuiButton","label","textTransform","outlinedSecondary","backgroundColor","opacity","ORGANISATIONS","gql","USER_REPO","ORGANISTAION_REPO","REPOSITORY","CREATE_DEPLOYMENT","useStylesTextField","makeStyles","theme","createStyles","root","background","float","marginRight","spacing","marginTop","color","borderRadius","Switcher","withRouter","props","history","useHistory","useQuery","loading","error","data","React","useState","anchorEl","setAnchorEl","style","message","options","viewer","url","resourcePath","organizations","nodes","forEach","element","push","selected","find","org","params","id","List","component","aria-label","ListItem","button","aria-haspopup","aria-controls","onClick","event","currentTarget","ListItemAvatar","Avatar","src","avatarUrl","ListItemText","name","Menu","keepMounted","open","onClose","map","organisation","MenuItem","key","SwitcherWrapper","path","Organisations","RepoList","query","variables","after","base","useRouteMatch","repositories","repo","owner","repository","useMutation","createDeployment","submit","autoMerge","description","environment","payload","refId","defaultBranchRef","repositoryId","requiredContexts","task","undefined","Grid","container","item","xs","Input","value","Button","input","Repository","res","organization","User","App","client","useMemo","getToken","httpLink","HttpLink","uri","apolloConfig","link","setContext","_","a","headers","token","Accept","authorization","concat","cache","InMemoryCache","ApolloClient","getApolloClient","className","href","localStorage","getItem","state","array","Uint32Array","random","crypto","getRandomValues","join","setItem","tokenFetcher","search","code","URLSearchParams","get","control","this","now","Date","getUTCSeconds","fetch","method","body","JSON","stringify","request","ok","text","response","parse","expires_in","refresh_token_expires_in","refetchToken","access_token","intialize","refresh_token","grant_type","pushState","document","title","pathname","redirect_uri","Promise","resolve","set","ReactDOM","render","StrictMode","accessControl","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2e987773.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport { deepOrange } from '@material-ui/core/colors'\n\nexport const phocasColors = {\n  blue: {\n    light: '#8ad9eb',\n    main: '#4ec6e0',\n    dark: '#46AFC7',\n    contrastText: '#FFFFFF'\n  },\n  orange: {\n    main: '#F7941E'\n  },\n  red: {\n    main: '#E14E4E'\n  },\n  green: {\n    light: '#39CE14'\n  },\n  white: '#FFFFFF',\n  black: '#000000',\n  grey: '#757575'\n}\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      ...phocasColors.blue\n    },\n    secondary: {\n      main: deepOrange[500]\n    }\n  },\n  overrides: {\n    MuiTableCell: {\n      sizeSmall: {\n        padding: 10\n      }\n    },\n    MuiSvgIcon: {\n      fontSizeSmall: {\n        fontSize: '1rem'\n      },\n      fontSizeLarge: {\n        fontSize: '2.5rem'\n      }\n    },\n    MuiButton: {\n      label: {\n        textTransform: 'none'\n      },\n      outlinedSecondary: {\n        backgroundColor: '#ffffff',\n        '&:hover': {\n          backgroundColor: '#ffffff',\n          opacity: '80%'\n        }\n      }\n    }\n  }\n})\n","import { gql } from 'apollo-boost'\r\n\r\nexport const ORGANISATIONS = gql`\r\n  query {\r\n    viewer {\r\n      resourcePath\r\n      name\r\n      avatarUrl\r\n      organizations(first: 10) {\r\n        nodes {\r\n          resourcePath\r\n          name\r\n          avatarUrl\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport type Viewer<R> = {\r\n  viewer: R\r\n}\r\n\r\nexport type OrganisationSummary = {\r\n  resourcePath: string\r\n  name: string\r\n  avatarUrl: string\r\n}\r\n\r\nexport type OrganisationsSummary = {\r\n  organizations: {\r\n    nodes: OrganisationSummary[]\r\n  }\r\n} & OrganisationSummary\r\n\r\nexport const USER_REPO = gql`\r\n  query repositories($after: String) {\r\n    viewer {\r\n      repositories(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }, after: $after) {\r\n        nodes {\r\n          name\r\n        }\r\n        pageInfo {\r\n          endCursor\r\n          hasNextPage\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nexport const ORGANISTAION_REPO = gql`\r\n  query organisation($organisation: String!, $after: String) {\r\n    organization(login: $organisation) {\r\n      repositories(\r\n        first: 100\r\n        affiliations: [ORGANIZATION_MEMBER]\r\n        ownerAffiliations: [ORGANIZATION_MEMBER]\r\n        orderBy: { field: UPDATED_AT, direction: DESC }\r\n        after: $after\r\n      ) {\r\n        nodes {\r\n          name\r\n        }\r\n        pageInfo {\r\n          endCursor\r\n          hasNextPage\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport type RepoQuery = {\r\n  repositories: Repositories\r\n}\r\n\r\nexport type organisationRepoQuery = {\r\n  organization: {\r\n    repositories: Repositories\r\n  }\r\n}\r\n\r\nexport type PageInfo = {\r\n  endCursor: string\r\n  hasNextPage: boolean\r\n}\r\n\r\nexport type Repositories = {\r\n  pageInfo: PageInfo\r\n  nodes: Repo[]\r\n}\r\nexport type Repo = {\r\n  name: string\r\n}\r\n\r\nexport const REPOSITORY = gql`\r\n  query repository($owner: String!, $name: String!) {\r\n    repository(owner: $owner, name: $name) {\r\n      id\r\n      name\r\n      description\r\n      defaultBranchRef {\r\n        id\r\n        name\r\n      }\r\n      deployments(first: 100) {\r\n        nodes {\r\n          id\r\n          description\r\n          creator {\r\n            avatarUrl\r\n            login\r\n          }\r\n          commit {\r\n            id\r\n            message\r\n          }\r\n          state\r\n          payload\r\n          createdAt\r\n          updatedAt\r\n          environment\r\n\r\n          originalEnvironment\r\n          latestEnvironment\r\n        }\r\n      }\r\n      releases(first: 100) {\r\n        nodes {\r\n          author {\r\n            avatarUrl\r\n            login\r\n          }\r\n          createdAt\r\n          updatedAt\r\n          name\r\n          description\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport type Deployment = {\r\n  id: string\r\n}\r\n\r\nexport type Release = {\r\n  id: string\r\n}\r\n\r\nexport type Repository = {\r\n  repository: {\r\n    id: string\r\n    name: string\r\n    description: string\r\n    defaultBranchRef: {\r\n      id: string\r\n      name: string\r\n    }\r\n    deployments: {\r\n      nodes: Deployment[]\r\n      pageInfo: PageInfo\r\n    }\r\n    releases: {\r\n      nodes: Release[]\r\n      pageInfo: PageInfo\r\n    }\r\n  }\r\n}\r\nexport const CREATE_DEPLOYMENT = gql`\r\n  mutation createDeployment($input: CreateDeploymentInput!) {\r\n    createDeployment(input: $input) {\r\n      autoMerged\r\n      clientMutationId\r\n      deployment {\r\n        id\r\n        description\r\n        creator {\r\n          avatarUrl\r\n          login\r\n        }\r\n        commit {\r\n          id\r\n          message\r\n        }\r\n        state\r\n        payload\r\n        createdAt\r\n        updatedAt\r\n        environment\r\n        originalEnvironment\r\n        latestEnvironment\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React, { FunctionComponent } from 'react'\r\nimport {\r\n  TextField,\r\n  makeStyles,\r\n  createStyles,\r\n  Avatar,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Menu,\r\n  MenuItem,\r\n  List\r\n} from '@material-ui/core'\r\n\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport { Theme } from '@material-ui/core'\r\nimport { phocasColors } from '../theme'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { Switch, Route, withRouter, RouteComponentProps, useHistory } from 'react-router-dom'\r\nimport { ORGANISATIONS, OrganisationsSummary, OrganisationSummary, Viewer } from '../types/queries'\r\n\r\nconst useStylesTextField = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      fontSize: 14,\r\n      background: phocasColors.white,\r\n      float: 'right',\r\n      marginRight: 10,\r\n      '& .MuiAutocomplete-inputRoot[class*=\"MuiOutlinedInput-root\"]': {\r\n        padding: `0 0 0 ${theme.spacing(1)}px`\r\n      },\r\n      '& .MuiInputBase-root': {\r\n        fontSize: 14,\r\n        marginTop: -3,\r\n        background: '#4ec6e0',\r\n        padding: 3.5,\r\n        color: phocasColors.white,\r\n        borderRadius: 0\r\n      },\r\n      '& .MuiInputBase-input': {\r\n        color: phocasColors.white\r\n      },\r\n      '& .MuiInputBase-input::placeholder': {\r\n        color: phocasColors.white,\r\n        opacity: 1,\r\n        fontSize: 14\r\n      }\r\n    }\r\n  })\r\n)\r\n\r\ntype RouteProps = {\r\n  id: string | undefined\r\n}\r\n\r\nconst OrganisationSwitcher: FunctionComponent<RouteComponentProps<RouteProps>> = (\r\n  props: RouteComponentProps<RouteProps>\r\n) => {\r\n  const history = useHistory()\r\n  const { loading, error, data } = useQuery<Viewer<OrganisationsSummary>>(ORGANISATIONS)\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null)\r\n\r\n  const handleClickListItem = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget)\r\n  }\r\n\r\n  const handleMenuItemClick = (event: React.MouseEvent<HTMLElement>, url: string) => {\r\n    setAnchorEl(null)\r\n    history.push(url)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null)\r\n  }\r\n\r\n  const textFieldClasses = useStylesTextField()\r\n\r\n  if (loading) {\r\n    return <div style={{ float: 'right', marginRight: 50 }}>Loading...</div>\r\n  }\r\n  if (error) {\r\n    return <div style={{ float: 'right', marginRight: 50 }}>{error.message}</div>\r\n  }\r\n\r\n  if (data) {\r\n    type Option = OrganisationSummary & { url: string }\r\n    const options: Option[] = [{ ...data.viewer, url: '/user' + data.viewer.resourcePath }]\r\n    data.viewer.organizations.nodes.forEach((element) => {\r\n      options.push({ ...element, url: '/organisations' + element.resourcePath })\r\n    })\r\n\r\n    const selected = options.find((org) => org.resourcePath === '/' + props.match.params.id)\r\n    return (\r\n      <>\r\n        <List component=\"nav\" aria-label=\"Select\">\r\n          <ListItem\r\n            button\r\n            aria-haspopup=\"true\"\r\n            aria-controls=\"lock-menu\"\r\n            aria-label=\"when device is locked\"\r\n            onClick={handleClickListItem}\r\n          >\r\n            {selected ? (\r\n              <>\r\n                <ListItemAvatar>\r\n                  <Avatar src={selected.avatarUrl}></Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText primary={selected.name} />\r\n              </>\r\n            ) : (\r\n              <ListItemText primary=\"Select\" />\r\n            )}\r\n          </ListItem>\r\n        </List>\r\n        <Menu id=\"lock-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose}>\r\n          {options.map((organisation) => (\r\n            <MenuItem\r\n              key={organisation.url}\r\n              selected={organisation === selected}\r\n              onClick={(event) => handleMenuItemClick(event, organisation.url)}\r\n            >\r\n              <ListItemAvatar>\r\n                <Avatar src={organisation.avatarUrl}></Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText primary={organisation.name} />\r\n            </MenuItem>\r\n          ))}\r\n        </Menu>\r\n      </>\r\n    )\r\n  }\r\n\r\n  return <div style={{ float: 'right', marginRight: 50 }}>no organisations</div>\r\n}\r\n\r\nconst Switcher = withRouter(OrganisationSwitcher)\r\n\r\nconst SwitcherWrapper: FunctionComponent = () => {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/user/:id\">\r\n          <Switcher />\r\n        </Route>\r\n        <Route path=\"/user/:id/*\">\r\n          <Switcher />\r\n        </Route>\r\n        <Route path=\"/organisations/:id\">\r\n          <Switcher />\r\n        </Route>\r\n        <Route path=\"/organisations/:id/*\">\r\n          <Switcher />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Switcher />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SwitcherWrapper\r\n","import React, { FunctionComponent } from 'react'\r\nimport { List, ListItem, ListItemText, ListItemAvatar, Avatar } from '@material-ui/core'\r\n\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { ORGANISATIONS, OrganisationsSummary, Viewer } from '../types/queries'\r\n\r\nconst Organisations: FunctionComponent = () => {\r\n  const { loading, error, data } = useQuery<Viewer<OrganisationsSummary>>(ORGANISATIONS)\r\n\r\n  const history = useHistory()\r\n  if (loading) {\r\n    return <div>Loading...</div>\r\n  }\r\n  if (error) {\r\n    return <div>{error.message}</div>\r\n  }\r\n\r\n  if (data) {\r\n    return (\r\n      <List component=\"nav\">\r\n        <ListItem key={data.viewer.resourcePath} button>\r\n          <ListItemAvatar>\r\n            <Avatar src={data.viewer.avatarUrl}></Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText onClick={() => history.push('/user' + data.viewer.resourcePath)} primary={data.viewer.name} />\r\n        </ListItem>\r\n        {data.viewer.organizations.nodes.map((organisation) => {\r\n          return (\r\n            <ListItem key={organisation.resourcePath} button>\r\n              <ListItemAvatar>\r\n                <Avatar src={organisation.avatarUrl}></Avatar>\r\n              </ListItemAvatar>\r\n              <ListItemText\r\n                onClick={() => history.push('/organisations' + organisation.resourcePath)}\r\n                primary={organisation.name}\r\n              />\r\n            </ListItem>\r\n          )\r\n        })}\r\n      </List>\r\n    )\r\n  }\r\n\r\n  return <div>no organisations</div>\r\n}\r\n\r\nexport default Organisations\r\n","import React from 'react'\r\nimport { List, ListItem, ListItemText } from '@material-ui/core'\r\n\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { useHistory, useRouteMatch } from 'react-router-dom'\r\nimport { Repositories } from '../types/queries'\r\nimport { DocumentNode } from 'graphql'\r\n\r\ntype Props<R> = {\r\n  query: DocumentNode\r\n  after?: string\r\n  map: (response: R) => Repositories\r\n  variables: Record<string, unknown>\r\n}\r\nfunction RepoList<R>(props: Props<R>) {\r\n  const { loading, error, data } = useQuery<R>(props.query, {\r\n    variables: { after: props.after, ...props.variables }\r\n  })\r\n\r\n  const base = useRouteMatch().url + '/'\r\n\r\n  const history = useHistory()\r\n  if (loading) {\r\n    return <div>Loading...</div>\r\n  }\r\n  if (error) {\r\n    return <div>{error.message}</div>\r\n  }\r\n  if (data) {\r\n    const repositories = props.map(data)\r\n    return (\r\n      <List component=\"nav\">\r\n        {repositories.nodes.map((repo) => {\r\n          return (\r\n            <ListItem key={repo.name} button>\r\n              <ListItemText onClick={() => history.push(base + repo.name)} primary={repo.name} />\r\n            </ListItem>\r\n          )\r\n        })}\r\n      </List>\r\n    )\r\n  }\r\n\r\n  return <div>no repositories</div>\r\n}\r\n\r\nexport default RepoList\r\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport { REPOSITORY, Repository, CREATE_DEPLOYMENT } from '../types/queries'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { Button, Input, Grid } from '@material-ui/core'\r\n\r\ntype RouteProps = {\r\n  owner: string\r\n  repository: string\r\n}\r\n\r\nconst RepositoryComponent: FunctionComponent<RouteComponentProps<RouteProps>> = (\r\n  props: RouteComponentProps<RouteProps>\r\n) => {\r\n  const { loading, error, data } = useQuery<Repository>(REPOSITORY, {\r\n    variables: { owner: props.match.params.owner, name: props.match.params.repository }\r\n  })\r\n  const [createDeployment, { loading: loadingMutation }] = useMutation(CREATE_DEPLOYMENT)\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>\r\n  }\r\n  if (error) {\r\n    return <div>{error.message}</div>\r\n  }\r\n  if (data) {\r\n    const repository = data.repository\r\n\r\n    const submit = {\r\n      autoMerge: true,\r\n      description: 'test123',\r\n      environment: 'stage',\r\n      payload: '{\"extra\": true}',\r\n      refId: repository.defaultBranchRef.id,\r\n      repositoryId: repository.id,\r\n      requiredContexts: [],\r\n      task: undefined\r\n    }\r\n    const deploy = () => {\r\n      createDeployment({\r\n        variables: {\r\n          input: submit\r\n        }\r\n      })\r\n    }\r\n\r\n    return (\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12}>\r\n          <h1>{repository.name}</h1>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Input name=\"ref\" value=\"master\" />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Input name=\"payload\" value=\"master\" />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Input name=\"Environment\" value=\"production\" />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button onClick={deploy}>Deploy</Button>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n  return <>No repository not found</>\r\n}\r\n\r\nexport default withRouter(RepositoryComponent)\r\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport { ORGANISTAION_REPO, organisationRepoQuery } from '../types/queries'\r\nimport RepoList from './RepoList'\r\nimport { withRouter, RouteComponentProps, Switch, Route, useRouteMatch } from 'react-router-dom'\r\nimport Repository from './Repository'\r\n\r\ntype RouteProps = {\r\n  owner: string\r\n}\r\n\r\nconst Organisation: FunctionComponent<RouteComponentProps<RouteProps>> = (props: RouteComponentProps<RouteProps>) => {\r\n  const base = useRouteMatch().path\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={base + '/:repository'}>\r\n        <Repository></Repository>\r\n      </Route>\r\n      <Route path={base}>\r\n        <RepoList\r\n          query={ORGANISTAION_REPO}\r\n          map={(res: organisationRepoQuery) => res.organization.repositories}\r\n          variables={{ organisation: props.match.params.owner }}\r\n        ></RepoList>\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default withRouter(Organisation)\r\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport { USER_REPO, RepoQuery, Viewer } from '../types/queries'\r\nimport RepoList from './RepoList'\r\nimport { Switch, Route, useRouteMatch } from 'react-router-dom'\r\nimport Repository from './Repository'\r\n\r\nconst User: FunctionComponent = () => {\r\n  const base = useRouteMatch().path\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path={base + '/:repository'}>\r\n        <Repository></Repository>\r\n      </Route>\r\n      <Route path={base}>\r\n        <RepoList query={USER_REPO} map={(res: Viewer<RepoQuery>) => res.viewer.repositories} variables={{}}></RepoList>\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\nimport { setContext } from 'apollo-link-context'\nimport { InMemoryCache, ApolloClient } from 'apollo-boost'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { Switch, Route } from 'react-router-dom'\nimport OrganisationSwitcher from './containers/OrganisationSwitcher'\nimport Organisations from './containers/Organisations'\nimport Organisation from './containers/Organisation'\nimport User from './containers/User'\nimport './App.css'\nimport { Grid, Avatar, ListItem, List, ListItemAvatar, ListItemText } from '@material-ui/core'\n\nexport function getApolloClient(getToken: Promise<() => Promise<string>>) {\n  const httpLink = new HttpLink({ uri: 'https://api.github.com/graphql' })\n\n  const authLink = setContext(async (_, { headers }) => {\n    // return the headers to the context so httpLink can read them\n    const token = await (await getToken)()\n    return {\n      headers: {\n        ...headers,\n        Accept: 'application/vnd.github.flash-preview+json',\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    }\n  })\n\n  const apolloConfig = {\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  }\n\n  return new ApolloClient(apolloConfig)\n}\n\nfunction App(props: { getToken: Promise<() => Promise<string>> }) {\n  const client = React.useMemo(() => getApolloClient(props.getToken), [])\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Grid container spacing={0} className=\"topNav\">\n          <Grid item xs={4}>\n            <List component=\"nav\" aria-label=\"Select\">\n              <ListItem button component=\"a\" href=\"/\">\n                <ListItemAvatar>\n                  <Avatar src=\"https://github.com/identicons/app/app/deployment-management\"></Avatar>\n                </ListItemAvatar>\n                <ListItemText primary=\"Github Deployment Management\" />\n              </ListItem>\n            </List>\n          </Grid>\n          <Grid item xs={4} className=\"page-title\">\n            Github Deployment Management\n          </Grid>\n          <Grid item xs={2} className=\"switcher\">\n            <OrganisationSwitcher />\n          </Grid>\n        </Grid>\n        <Switch>\n          <Route path=\"/organisations/:owner\">\n            <Organisation></Organisation>\n          </Route>\n          <Route path=\"/user/:owner\">\n            <User></User>\n          </Route>\n          <Route path=\"/\">\n            <Organisations></Organisations>\n          </Route>\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n","const token = window.localStorage.getItem('githubtoken')\r\nlet state = window.localStorage.getItem('githubstate')\r\nif (state === null) {\r\n  const array = new Uint32Array(4)\r\n  const random = window.crypto.getRandomValues(array)\r\n  state = random.join()\r\n  window.localStorage.setItem('githubstate', state)\r\n}\r\n\r\nconst search = window.location.search\r\nconst urlParams = new URLSearchParams(search)\r\nconst code = urlParams.get('code')\r\n\r\nconst getToken = () => {\r\n  window.location.href = `https://github.com/login/oauth/authorize?client_id=Iv1.8b0b75bc0049753c&redirect_uri=https://ashley-taylor.github.io/Deployment-Management/&state=${state}`\r\n}\r\n\r\ntype Response = {\r\n  access_token: string\r\n  expires_in: number\r\n  refresh_token: string\r\n  refresh_token_expires_in: number\r\n  token_type: string\r\n}\r\nclass TokenControl {\r\n  data?: Response\r\n\r\n  set(data: Response) {\r\n    this.data = data\r\n  }\r\n\r\n  async intialize(data: unknown) {\r\n    const now = new Date().getUTCSeconds()\r\n    const request = await fetch('https://d2ks1w3r94.execute-api.us-east-2.amazonaws.com/', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data)\r\n    })\r\n    if (!request.ok) {\r\n      throw 'Failed to get access token'\r\n    }\r\n    const text = await request.text()\r\n\r\n    const response = JSON.parse(text) as Response\r\n    response.expires_in += now\r\n    response.refresh_token_expires_in += now\r\n    this.data = response\r\n    window.localStorage.setItem('githubtoken', JSON.stringify(response))\r\n    return this.getToken\r\n  }\r\n\r\n  async getToken(): Promise<string> {\r\n    if (this.data === undefined) {\r\n      throw 'misconfigured'\r\n    }\r\n    if (this.data.expires_in < new Date().getUTCSeconds()) {\r\n      await this.refetchToken()\r\n    }\r\n    if (this.data.refresh_token_expires_in < new Date().getUTCSeconds()) {\r\n      getToken()\r\n    }\r\n    return this.data.access_token\r\n  }\r\n\r\n  async refetchToken() {\r\n    if (this.data === undefined) {\r\n      throw 'misconfigured'\r\n    }\r\n    await this.intialize({ refresh_token: this.data?.refresh_token, grant_type: 'refresh_token' })\r\n  }\r\n}\r\n\r\nconst control = new TokenControl()\r\n\r\nlet tokenFetcher: Promise<() => Promise<string>>\r\nif (code !== null) {\r\n  window.history.pushState({}, document.title, window.location.pathname)\r\n  const data = {\r\n    code,\r\n    state,\r\n    redirect_uri: 'https://ashley-taylor.github.io/Deployment-Management/'\r\n  }\r\n  tokenFetcher = control.intialize(data)\r\n} else if (token === null) {\r\n  getToken()\r\n  tokenFetcher = Promise.resolve(() => control.getToken())\r\n} else {\r\n  const response = JSON.parse(token) as Response\r\n  if (response.access_token === undefined) {\r\n    getToken()\r\n  }\r\n  control.set(response)\r\n  tokenFetcher = Promise.resolve(() => control.getToken())\r\n}\r\n\r\nexport default tokenFetcher\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport accessControl from './accessControl'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App getToken={accessControl} />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}